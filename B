#include <stdio.h>
#include <stdbool.h>

#define MAX 20  // Define the maximum size of the chessboard

int board[MAX][MAX];
int n;  // Size of the chessboard

// Function to print the chessboard
void printBoard() {
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            if (board[i][j] == 1)
                printf(" Q ");
            else
                printf(" . ");
        }
        printf("\n");
    }
    printf("\n");
}

// Function to check if it's safe to place a queen at board[row][col]
bool isSafe(int row, int col) {
    int i, j;

    // Check the column for any queens
    for (i = 0; i < row; i++)
        if (board[i][col] == 1)
            return false;

    // Check upper left diagonal
    for (i = row, j = col; i >= 0 && j >= 0; i--, j--)
        if (board[i][j] == 1)
            return false;

    // Check upper right diagonal
    for (i = row, j = col; i >= 0 && j < n; i--, j++)
        if (board[i][j] == 1)
            return false;

    return true;
}

// Function to solve the N-Queens problem using backtracking
void solveNQueens(int row) {
    if (row >= n) {
        printBoard();
        return;
    }

    for (int col = 0; col < n; col++) {
        if (isSafe(row, col)) {
            board[row][col] = 1;  // Place the queen

            solveNQueens(row + 1);  // Recur to place the next queen

            board[row][col] = 0;  // Remove the queen (backtrack)
        }
    }
}

int main() {
    printf("Enter the number of queens: ");
    scanf("%d", &n);

    // Initialize the chessboard with 0s
    for (int i = 0; i < n; i++)
        for (int j = 0; j < n; j++)
            board[i][j] = 0;

    solveNQueens(0);

    return 0;
}
